# This script is mostly generated by chatgpt. As this project is about
# neural networks, I want to spend time working on the network, and not
# in a program that generates training data.
# The objective of this script is to generate images of circles and
# squares with different positions and sizes, so I can train the neural
# network.

from PIL import Image, ImageDraw
import os
import random
import hashlib

# Target resolution for the output images
target_res = 12  # or 16, depending on your needs

def generate_shapes(shape, number_of_images):
    base_path = os.path.join(os.getcwd(), "training", shape + f"{target_res}x{target_res}")
    os.makedirs(base_path, exist_ok=True)

    for i in range(1, number_of_images + 1):
        # Generate at a higher resolution
        high_res = 128  # High resolution for initial image generation
        img = Image.new('RGB', (high_res, high_res), 'black')
        draw = ImageDraw.Draw(img)

        if shape == 'squares':
            size = random.randint(high_res // 4, high_res // 2)
            offset_x = random.randint(1, high_res - size - 1)
            offset_y = random.randint(1, high_res - size - 1)
            shape_outline = [offset_x, offset_y, offset_x + size, offset_y + size]
            draw.rectangle(shape_outline, outline='white', fill='white')
        
        elif shape == 'circles':
            radius = random.randint(high_res // 8, high_res // 4)
            offset_x = random.randint(radius + 1, high_res - radius - 1)
            offset_y = random.randint(radius + 1, high_res - radius - 1)
            shape_outline = [offset_x - radius, offset_y - radius, offset_x + radius, offset_y + radius]
            draw.ellipse(shape_outline, outline='white', fill='white')

        # Resize the image to target resolution with antialiasing
        img = img.resize((target_res, target_res), Image.LANCZOS)

        filename = f"{shape}{i:04}.png"
        img.save(os.path.join(base_path, filename))


# Adjust the number of images if needed
number_of_images_per_shape = 400

generate_shapes('squares', number_of_images_per_shape)
generate_shapes('circles', number_of_images_per_shape)

print("Images generated successfully.")


def hash_image(image_path):
    with Image.open(image_path) as img:
        # Convert the image to bytes
        img_bytes = img.tobytes()
        # Create a hash of the image bytes
        hash = hashlib.sha256(img_bytes).hexdigest()
    return hash

def find_and_remove_duplicates(folder_path):
    hashes = {}
    duplicate_count = 0
    
    for filename in os.listdir(folder_path):
        # Construct the full path to the image
        file_path = os.path.join(folder_path, filename)
        
        # Calculate the image hash
        image_hash = hash_image(file_path)
        
        # Check if the hash already exists in the dictionary
        if image_hash in hashes:
            os.remove(file_path)
            duplicate_count += 1
        else:
            hashes[image_hash] = filename
    
    print(f"Removed {duplicate_count} duplicate images.")


print ("Removing duplicate images...")

folder_path = os.path.join(os.getcwd(), "training", "squares" + f"{target_res}x{target_res}")
find_and_remove_duplicates(folder_path)
folder_path = os.path.join(os.getcwd(), "training", "circles" + f"{target_res}x{target_res}")
find_and_remove_duplicates(folder_path)

print("Duplicate images removed.")