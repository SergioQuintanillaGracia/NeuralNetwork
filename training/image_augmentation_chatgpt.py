# This script is mostly generated by chatgpt. As this project is about
# neural networks, I want to spend time working on the network, and not
# in programs to treat with training data.
# The objective of this script is to generate rotated variants of images
# and add random noise, to multiply by 4 the training data, and train the
# AI to ignore noise and center on the paterns of the main shape of the
# image.

import os
import numpy as np
from PIL import Image

def add_noise(image, noise_level=5, color_noise=False):
    """
    Manually adds noise to each pixel of the image.
    `noise_level` controls the intensity of the noise.
    `color_noise` toggles between colored noise and grayscale noise.
    """
    np_image = np.array(image, dtype=np.float32)
    rows, cols = np_image.shape[:2]
    
    if color_noise:
        # Generate colored noise
        for i in range(rows):
            for j in range(cols):
                noise = np.random.randint(-noise_level, noise_level, 3)
                np_image[i, j, :3] = np.clip(np_image[i, j, :3] + noise, 0, 255)
    else:
        # Generate grayscale noise
        for i in range(rows):
            for j in range(cols):
                noise = np.random.randint(-noise_level, noise_level)
                if len(np_image.shape) == 3:  # For RGB images
                    np_image[i, j, :3] = np.clip(np_image[i, j, :3] + noise, 0, 255)
                else:  # For grayscale images
                    np_image[i, j] = np.clip(np_image[i, j] + noise, 0, 255)
    
    noisy_image = Image.fromarray(np_image.astype(np.uint8))
    return noisy_image

def rotate_and_save(image_path, times=3, noise_level=5, rotate=True, remove_original=True, color_noise=True):
    """
    Rotates an image three times, each time saving `times` number of different noisy versions.
    Follows a specific naming convention where the original image keeps its name,
    and rotated images have suffixes _1, _2, _3, etc., increasing with more `times`.
    """
    base, ext = os.path.splitext(image_path)
    image = Image.open(image_path)
    
    if remove_original:
        os.remove(image_path)

    # Define starting suffix for the additional noisy versions of the original image
    suffix_counter = 1

    # Generate and save `times` noisy versions of the original image
    for n in range(times):
        noisy_image = add_noise(image, noise_level, color_noise)
        noisy_image.save(f"{base}_{suffix_counter}{ext}")
        suffix_counter += 1

    if rotate:
        # Generate and save `times` noisy versions of each rotated image
        for i in range(1, 4):  # For each rotation (90, 180, 270 degrees)
            rotated_image = image.rotate(i * 90)
            for n in range(times):
                noisy_rotated_image = add_noise(rotated_image, noise_level, color_noise)
                noisy_rotated_image.save(f"{base}_{suffix_counter}{ext}")
                suffix_counter += 1


# Specify your folder path here
folder_path = 'training/0_24x24'

# Loop through all images in the folder
for filename in os.listdir(folder_path):
    if filename.lower().endswith(('.png', '.jpg', '.jpeg', '.bmp', '.gif')):
        image_path = os.path.join(folder_path, filename)
        rotate_and_save(image_path, times=3, noise_level=30, rotate=False, remove_original=False, color_noise=False)
